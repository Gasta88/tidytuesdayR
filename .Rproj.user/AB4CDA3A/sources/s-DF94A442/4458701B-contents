---
title: "TidyTemplate"
date: 2021-02-19
output: html_output
---

# TidyTuesday


```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(tidytuesdayR)
library(ggplot2)
library(countrycode)
library(viridis)
library(hrbrthemes)
library(ggridges)
library(rnaturalearth)
library(patchwork)
```

# Load the weekly Data

Download the weekly data and make available in the `tt` object.

```{r Load}

tt <- tt_load("2018-06-26")

```

# Glimpse Data

Take an initial look at the format of the data available.

```{r Glimpse}

tt %>% 
  map(glimpse)

```

# Wrangle

Explore the data and process it into a nice format for plotting! Access each dataset by name by using a dollarsign after the `tt` object and then the name of the data set.

```{r Wrangle}

df <- tt$week13_alcohol_global
df$continent <- countrycode(sourcevar = df[["country"]],
                            origin = "country.name",
                            destination = "continent")

df <- within(df, continent[country == 'Micronesia'] <- 'Oceania')


df2 <- df %>%
  select(- total_litres_of_pure_alcohol) %>%
  filter(continent == "Europe") %>%
  # filter(country=="France")%>%
  arrange(country)%>%
  rename(geounit=country) %>%
  select (- continent)

df2[df2$geounit == 'Bosnia-Herzegovina', "geounit" ] <-'Bosnia and Herzegovina'

europe <- rnaturalearth::ne_countries(
  continent = "Europe",
  returnclass = "sf"
)


df3 <- right_join(europe, df2, by="geounit")

```


# Visualize

Using your processed dataset, create your unique visualization.

```{r Visualize}
p1 <- ggplot(df, aes(x = total_litres_of_pure_alcohol, y = continent, fill = ..x..)) +
      geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
      scale_fill_viridis(name = "Total Consumption [L]", option = "B") +
      labs(title = 'World consumption', x = "Total liters of pure alcohol consumed", y = "Continent") +
      theme_ipsum() +
        theme(
          legend.position="none",
          plot.title = element_text(hjust = 0, size = 12),
          panel.spacing = unit(0.1, "lines"),
          strip.text.x = element_text(size = 6),
          strip.text.y = element_text(size = 6)
        )


p2 <- ggplot(df3, aes(fill = beer_servings)) + 
      geom_sf() +
      coord_sf(xlim = c(-23, 40), ylim = c(30,82)) +
      scale_fill_viridis_c(alpha = 0.75) +
      labs(
        title = "Beer serving in Europe",
        fill=NULL
      ) +
      theme_bw()+
        theme(
          legend.position="none",
          plot.title = element_text(hjust = 0, size = 10),
          axis.text.x = element_text(size = 7),
          axis.text.y = element_text(size = 7))

p3 <- ggplot(df3, aes(fill = spirit_servings)) + 
      geom_sf() + 
      coord_sf(xlim = c(-23, 40), ylim = c(30,82)) + 
      scale_fill_viridis_c(alpha = 0.75) +
      labs(
        title = "Spirit serving in Europe",
        fill=NULL
      ) +
      theme_bw()+
        theme(
          legend.position="none",
          plot.title = element_text(hjust = 0, size = 10),
          axis.text.x = element_text(size = 7),
          axis.text.y = element_text(size = 7))

p4 <- ggplot(df3, aes(fill = wine_servings)) + 
      geom_sf() + 
      coord_sf(xlim = c(-23, 40), ylim = c(30,82)) + 
      scale_fill_viridis_c(alpha = 0.75) +
      labs(
        title = "Wine serving in Europe",
        fill=NULL
      ) +
      theme_bw()+
        theme(
          legend.position="none",
          plot.title = element_text(hjust = 0, size = 10),
          axis.text.x = element_text(size = 7),
          axis.text.y = element_text(size = 7))


# main_plot <- p1 / (p2 + p3 + p4) & theme(legend.position = "bottom")
# main_plot + plot_layout(guides = "collect")

main_plot <- p1 / ((p2 + p3 + p4) + plot_layout(guides = "collect") & theme(legend.position = "bottom"))

```

# Save Image

Save your image for sharing. Be sure to use the `#TidyTuesday` hashtag in your post on twitter! 

```{r}

# This will save your most recent plot
ggsave(
  filename = "My TidyTuesday Plot.png",
  device = "png", dpi=900, main_plot)
```
